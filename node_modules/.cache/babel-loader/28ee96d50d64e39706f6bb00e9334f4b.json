{"ast":null,"code":"/*\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\n\n/**\r\n * @file param.js\r\n * @author Marek Kotewicz <marek@parity.io>\r\n * @date 2015\r\n */\nvar formatters = require('./formatters.js');\n/**\r\n * SolidityParam object prototype.\r\n * Should be used when encoding, decoding solidity bytes\r\n */\n\n\nvar SolidityParam = function SolidityParam(value, offset, rawValue) {\n  this.value = value || '';\n  this.offset = offset; // offset in bytes\n\n  this.rawValue = rawValue; // used for debugging\n};\n/**\r\n * This method should be used to get length of params's dynamic part\r\n *\r\n * @method dynamicPartLength\r\n * @returns {Number} length of dynamic part (in bytes)\r\n */\n\n\nSolidityParam.prototype.dynamicPartLength = function () {\n  return this.dynamicPart().length / 2;\n};\n/**\r\n * This method should be used to create copy of solidity param with different offset\r\n *\r\n * @method withOffset\r\n * @param {Number} offset length in bytes\r\n * @returns {SolidityParam} new solidity param with applied offset\r\n */\n\n\nSolidityParam.prototype.withOffset = function (offset) {\n  return new SolidityParam(this.value, offset);\n};\n/**\r\n * This method should be used to combine solidity params together\r\n * eg. when appending an array\r\n *\r\n * @method combine\r\n * @param {SolidityParam} param with which we should combine\r\n * @param {SolidityParam} result of combination\r\n */\n\n\nSolidityParam.prototype.combine = function (param) {\n  return new SolidityParam(this.value + param.value);\n};\n/**\r\n * This method should be called to check if param has dynamic size.\r\n * If it has, it returns true, otherwise false\r\n *\r\n * @method isDynamic\r\n * @returns {Boolean}\r\n */\n\n\nSolidityParam.prototype.isDynamic = function () {\n  return this.offset !== undefined;\n};\n/**\r\n * This method should be called to transform offset to bytes\r\n *\r\n * @method offsetAsBytes\r\n * @returns {String} bytes representation of offset\r\n */\n\n\nSolidityParam.prototype.offsetAsBytes = function () {\n  return !this.isDynamic() ? '' : formatters.toTwosComplement(this.offset).replace('0x', '');\n};\n/**\r\n * This method should be called to get static part of param\r\n *\r\n * @method staticPart\r\n * @returns {String} offset if it is a dynamic param, otherwise value\r\n */\n\n\nSolidityParam.prototype.staticPart = function () {\n  if (!this.isDynamic()) {\n    return this.value;\n  }\n\n  return this.offsetAsBytes();\n};\n/**\r\n * This method should be called to get dynamic part of param\r\n *\r\n * @method dynamicPart\r\n * @returns {String} returns a value if it is a dynamic param, otherwise empty string\r\n */\n\n\nSolidityParam.prototype.dynamicPart = function () {\n  return this.isDynamic() ? this.value : '';\n};\n/**\r\n * This method should be called to encode param\r\n *\r\n * @method encode\r\n * @returns {String}\r\n */\n\n\nSolidityParam.prototype.encode = function () {\n  return this.staticPart() + this.dynamicPart();\n};\n/**\r\n * This method should be called to encode array of params\r\n *\r\n * @method encodeList\r\n * @param {Array[SolidityParam]} params\r\n * @returns {String}\r\n */\n\n\nSolidityParam.encodeList = function (params) {\n  // updating offsets\n  var totalOffset = params.length * 32;\n  var offsetParams = params.map(function (param) {\n    if (!param.isDynamic()) {\n      return param;\n    }\n\n    var offset = totalOffset;\n    totalOffset += param.dynamicPartLength();\n    return param.withOffset(offset);\n  }); // encode everything!\n\n  return offsetParams.reduce(function (result, param) {\n    return result + param.dynamicPart();\n  }, offsetParams.reduce(function (result, param) {\n    return result + param.staticPart();\n  }, ''));\n};\n\nmodule.exports = SolidityParam;","map":null,"metadata":{},"sourceType":"script"}