{"ast":null,"code":"var f = require('./formatters');\n\nvar SolidityParam = require('./param');\n/**\r\n * SolidityType prototype is used to encode/decode solidity params of certain type\r\n */\n\n\nvar SolidityType = function SolidityType(config) {\n  this._inputFormatter = config.inputFormatter;\n  this._outputFormatter = config.outputFormatter;\n};\n/**\r\n * Should be used to determine if this SolidityType do match given name\r\n *\r\n * @method isType\r\n * @param {String} name\r\n * @return {Bool} true if type match this SolidityType, otherwise false\r\n */\n\n\nSolidityType.prototype.isType = function (name) {\n  throw \"This method should be overwritten for type \" + name;\n};\n/**\r\n * Should be used to determine what is the length of static part in given type\r\n *\r\n * @method staticPartLength\r\n * @param {String} name\r\n * @return {Number} length of static part in bytes\r\n */\n\n\nSolidityType.prototype.staticPartLength = function (name) {\n  // If name isn't an array then treat it like a single element array.\n  return (this.nestedTypes(name) || ['[1]']).map(function (type) {\n    // the length of the nested array\n    return parseInt(type.slice(1, -1), 10) || 1;\n  }).reduce(function (previous, current) {\n    return previous * current; // all basic types are 32 bytes long\n  }, 32);\n};\n/**\r\n * Should be used to determine if type is dynamic array\r\n * eg:\r\n * \"type[]\" => true\r\n * \"type[4]\" => false\r\n *\r\n * @method isDynamicArray\r\n * @param {String} name\r\n * @return {Bool} true if the type is dynamic array\r\n */\n\n\nSolidityType.prototype.isDynamicArray = function (name) {\n  var nestedTypes = this.nestedTypes(name);\n  return !!nestedTypes && !nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);\n};\n/**\r\n * Should be used to determine if type is static array\r\n * eg:\r\n * \"type[]\" => false\r\n * \"type[4]\" => true\r\n *\r\n * @method isStaticArray\r\n * @param {String} name\r\n * @return {Bool} true if the type is static array\r\n */\n\n\nSolidityType.prototype.isStaticArray = function (name) {\n  var nestedTypes = this.nestedTypes(name);\n  return !!nestedTypes && !!nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);\n};\n/**\r\n * Should return length of static array\r\n * eg.\r\n * \"int[32]\" => 32\r\n * \"int256[14]\" => 14\r\n * \"int[2][3]\" => 3\r\n * \"int\" => 1\r\n * \"int[1]\" => 1\r\n * \"int[]\" => 1\r\n *\r\n * @method staticArrayLength\r\n * @param {String} name\r\n * @return {Number} static array length\r\n */\n\n\nSolidityType.prototype.staticArrayLength = function (name) {\n  var nestedTypes = this.nestedTypes(name);\n\n  if (nestedTypes) {\n    return parseInt(nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g) || 1);\n  }\n\n  return 1;\n};\n/**\r\n * Should return nested type\r\n * eg.\r\n * \"int[32]\" => \"int\"\r\n * \"int256[14]\" => \"int256\"\r\n * \"int[2][3]\" => \"int[2]\"\r\n * \"int\" => \"int\"\r\n * \"int[]\" => \"int\"\r\n *\r\n * @method nestedName\r\n * @param {String} name\r\n * @return {String} nested name\r\n */\n\n\nSolidityType.prototype.nestedName = function (name) {\n  // remove last [] in name\n  var nestedTypes = this.nestedTypes(name);\n\n  if (!nestedTypes) {\n    return name;\n  }\n\n  return name.substr(0, name.length - nestedTypes[nestedTypes.length - 1].length);\n};\n/**\r\n * Should return true if type has dynamic size by default\r\n * such types are \"string\", \"bytes\"\r\n *\r\n * @method isDynamicType\r\n * @param {String} name\r\n * @return {Bool} true if is dynamic, otherwise false\r\n */\n\n\nSolidityType.prototype.isDynamicType = function () {\n  return false;\n};\n/**\r\n * Should return array of nested types\r\n * eg.\r\n * \"int[2][3][]\" => [\"[2]\", \"[3]\", \"[]\"]\r\n * \"int[] => [\"[]\"]\r\n * \"int\" => null\r\n *\r\n * @method nestedTypes\r\n * @param {String} name\r\n * @return {Array} array of nested types\r\n */\n\n\nSolidityType.prototype.nestedTypes = function (name) {\n  // return list of strings eg. \"[]\", \"[3]\", \"[]\", \"[2]\"\n  return name.match(/(\\[[0-9]*\\])/g);\n};\n/**\r\n * Should be used to encode the value\r\n *\r\n * @method encode\r\n * @param {Object} value\r\n * @param {String} name\r\n * @return {String} encoded value\r\n */\n\n\nSolidityType.prototype.encode = function (value, name) {\n  var self = this;\n\n  if (this.isDynamicArray(name)) {\n    return function () {\n      var length = value.length; // in int\n\n      var nestedName = self.nestedName(name);\n      var result = [];\n      result.push(f.formatInputInt(length).encode());\n      value.forEach(function (v) {\n        result.push(self.encode(v, nestedName));\n      });\n      return result;\n    }();\n  } else if (this.isStaticArray(name)) {\n    return function () {\n      var length = self.staticArrayLength(name); // in int\n\n      var nestedName = self.nestedName(name);\n      var result = [];\n\n      for (var i = 0; i < length; i++) {\n        result.push(self.encode(value[i], nestedName));\n      }\n\n      return result;\n    }();\n  }\n\n  return this._inputFormatter(value, name).encode();\n};\n/**\r\n * Should be used to decode value from bytes\r\n *\r\n * @method decode\r\n * @param {String} bytes\r\n * @param {Number} offset in bytes\r\n * @param {String} name type name\r\n * @returns {Object} decoded value\r\n */\n\n\nSolidityType.prototype.decode = function (bytes, offset, name) {\n  var self = this;\n\n  if (this.isDynamicArray(name)) {\n    return function () {\n      var arrayOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes\n\n      var length = parseInt('0x' + bytes.substr(arrayOffset * 2, 64)); // in int\n\n      var arrayStart = arrayOffset + 32; // array starts after length; // in bytes\n\n      var nestedName = self.nestedName(name);\n      var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes\n\n      var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;\n      var result = [];\n\n      for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {\n        result.push(self.decode(bytes, arrayStart + i, nestedName));\n      }\n\n      return result;\n    }();\n  } else if (this.isStaticArray(name)) {\n    return function () {\n      var length = self.staticArrayLength(name); // in int\n\n      var arrayStart = offset; // in bytes\n\n      var nestedName = self.nestedName(name);\n      var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes\n\n      var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;\n      var result = [];\n\n      for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {\n        result.push(self.decode(bytes, arrayStart + i, nestedName));\n      }\n\n      return result;\n    }();\n  } else if (this.isDynamicType(name)) {\n    return function () {\n      var dynamicOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes\n\n      var length = parseInt('0x' + bytes.substr(dynamicOffset * 2, 64)); // in bytes\n\n      var roundedLength = Math.floor((length + 31) / 32); // in int\n\n      var param = new SolidityParam(bytes.substr(dynamicOffset * 2, (1 + roundedLength) * 64), 0, bytes);\n      return self._outputFormatter(param, name);\n    }();\n  }\n\n  var length = this.staticPartLength(name);\n  var param = new SolidityParam(bytes.substr(offset * 2, length * 2), undefined, bytes);\n  return this._outputFormatter(param, name);\n};\n\nmodule.exports = SolidityType;","map":null,"metadata":{},"sourceType":"script"}