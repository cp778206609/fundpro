{"ast":null,"code":"/*\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\n\n/**\r\n * @file formatters.js\r\n * @author Marek Kotewicz <marek@parity.io>\r\n * @author Fabian Vogelsteller <fabian@frozeman.de>\r\n * @date 2017\r\n */\nvar _ = require('underscore');\n\nvar utils = require('web3-utils');\n\nvar BN = require('bn.js');\n\nvar SolidityParam = require('./param');\n/**\r\n * Formats input value to byte representation of int\r\n * If value is negative, return it's two's complement\r\n * If the value is floating point, round it down\r\n *\r\n * @method formatInputInt\r\n * @param {String|Number|BN} value that needs to be formatted\r\n * @returns {SolidityParam}\r\n */\n\n\nvar formatInputInt = function formatInputInt(value) {\n  if (_.isNumber(value)) {\n    value = Math.trunc(value);\n  }\n\n  return new SolidityParam(utils.toTwosComplement(value).replace('0x', ''));\n};\n/**\r\n * Formats input bytes\r\n *\r\n * @method formatInputBytes\r\n * @param {String} value\r\n * @returns {SolidityParam}\r\n */\n\n\nvar formatInputBytes = function formatInputBytes(value) {\n  if (!utils.isHexStrict(value)) {\n    throw new Error('Given parameter is not bytes: \"' + value + '\"');\n  }\n\n  var result = value.replace(/^0x/i, '');\n\n  if (result.length % 2 !== 0) {\n    throw new Error('Given parameter bytes has an invalid length: \"' + value + '\"');\n  }\n\n  if (result.length > 64) {\n    throw new Error('Given parameter bytes is too long: \"' + value + '\"');\n  }\n\n  var l = Math.floor((result.length + 63) / 64);\n  result = utils.padRight(result, l * 64);\n  return new SolidityParam(result);\n};\n/**\r\n * Formats input bytes\r\n *\r\n * @method formatDynamicInputBytes\r\n * @param {String} value\r\n * @returns {SolidityParam}\r\n */\n\n\nvar formatInputDynamicBytes = function formatInputDynamicBytes(value) {\n  if (!utils.isHexStrict(value)) {\n    throw new Error('Given parameter is not bytes: \"' + value + '\"');\n  }\n\n  var result = value.replace(/^0x/i, '');\n\n  if (result.length % 2 !== 0) {\n    throw new Error('Given parameter bytes has an invalid length: \"' + value + '\"');\n  }\n\n  var length = result.length / 2;\n  var l = Math.floor((result.length + 63) / 64);\n  result = utils.padRight(result, l * 64);\n  return new SolidityParam(formatInputInt(length).value + result);\n};\n/**\r\n * Formats input value to byte representation of string\r\n *\r\n * @method formatInputString\r\n * @param {String}\r\n * @returns {SolidityParam}\r\n */\n\n\nvar formatInputString = function formatInputString(value) {\n  if (!_.isString(value)) {\n    throw new Error('Given parameter is not a valid string: ' + value);\n  }\n\n  var result = utils.utf8ToHex(value).replace(/^0x/i, '');\n  var length = result.length / 2;\n  var l = Math.floor((result.length + 63) / 64);\n  result = utils.padRight(result, l * 64);\n  return new SolidityParam(formatInputInt(length).value + result);\n};\n/**\r\n * Formats input value to byte representation of bool\r\n *\r\n * @method formatInputBool\r\n * @param {Boolean}\r\n * @returns {SolidityParam}\r\n */\n\n\nvar formatInputBool = function formatInputBool(value) {\n  var result = '000000000000000000000000000000000000000000000000000000000000000' + (value ? '1' : '0');\n  return new SolidityParam(result);\n};\n/**\r\n * Check if input value is negative\r\n *\r\n * @method signedIsNegative\r\n * @param {String} value is hex format\r\n * @returns {Boolean} true if it is negative, otherwise false\r\n */\n\n\nvar signedIsNegative = function signedIsNegative(value) {\n  return new BN(value.substr(0, 1), 16).toString(2).substr(0, 1) === '1';\n};\n/**\r\n * Formats right-aligned output bytes to int\r\n *\r\n * @method formatOutputInt\r\n * @param {SolidityParam} param\r\n * @returns {BN} right-aligned output bytes formatted to big number\r\n */\n\n\nvar formatOutputInt = function formatOutputInt(param) {\n  var value = param.staticPart();\n\n  if (!value && !param.rawValue) {\n    throw new Error('Couldn\\'t decode ' + name + ' from ABI: 0x' + param.rawValue);\n  } // check if it's negative number\n  // it it is, return two's complement\n\n\n  if (signedIsNegative(value)) {\n    return new BN(value, 16).fromTwos(256).toString(10);\n  }\n\n  return new BN(value, 16).toString(10);\n};\n/**\r\n * Formats right-aligned output bytes to uint\r\n *\r\n * @method formatOutputUInt\r\n * @param {SolidityParam} param\r\n * @returns {BN} right-aligned output bytes formatted to uint\r\n */\n\n\nvar formatOutputUInt = function formatOutputUInt(param, name) {\n  var value = param.staticPart();\n\n  if (!value && !param.rawValue) {\n    throw new Error('Couldn\\'t decode ' + name + ' from ABI: 0x' + param.rawValue);\n  }\n\n  return new BN(value, 16).toString(10);\n};\n/**\r\n * Should be used to format output bool\r\n *\r\n * @method formatOutputBool\r\n * @param {SolidityParam} param\r\n * @param {String} name type name\r\n * @returns {Boolean} right-aligned input bytes formatted to bool\r\n */\n\n\nvar formatOutputBool = function formatOutputBool(param, name) {\n  var value = param.staticPart();\n\n  if (!value && !param.rawValue) {\n    throw new Error('Couldn\\'t decode ' + name + ' from ABI: 0x' + param.rawValue);\n  }\n\n  return value === '0000000000000000000000000000000000000000000000000000000000000001';\n};\n/**\r\n * Should be used to format output bytes\r\n *\r\n * @method formatOutputBytes\r\n * @param {SolidityParam} param left-aligned hex representation of string\r\n * @param {String} name type name\r\n * @returns {String} hex string\r\n */\n\n\nvar formatOutputBytes = function formatOutputBytes(param, name) {\n  var matches = name.match(/^bytes([0-9]*)/);\n  var size = parseInt(matches[1]);\n\n  if (param.staticPart().slice(0, 2 * size).length !== size * 2) {\n    throw new Error('Couldn\\'t decode ' + name + ' from ABI: 0x' + param.rawValue + ' The size doesn\\'t match.');\n  }\n\n  return '0x' + param.staticPart().slice(0, 2 * size);\n};\n/**\r\n * Should be used to format output bytes\r\n *\r\n * @method formatOutputDynamicBytes\r\n * @param {SolidityParam} param left-aligned hex representation of string\r\n * @param {String} name type name\r\n * @returns {String} hex string\r\n */\n\n\nvar formatOutputDynamicBytes = function formatOutputDynamicBytes(param, name) {\n  var hex = param.dynamicPart().slice(0, 64);\n\n  if (!hex) {\n    throw new Error('Couldn\\'t decode ' + name + ' from ABI: 0x' + param.rawValue);\n  }\n\n  var length = new BN(hex, 16).toNumber() * 2;\n  return '0x' + param.dynamicPart().substr(64, length);\n};\n/**\r\n * Should be used to format output string\r\n *\r\n * @method formatOutputString\r\n * @param {SolidityParam} left-aligned hex representation of string\r\n * @returns {String} ascii string\r\n */\n\n\nvar formatOutputString = function formatOutputString(param) {\n  var hex = param.dynamicPart().slice(0, 64);\n\n  if (!hex) {\n    throw new Error('ERROR: The returned value is not a convertible string:' + hex);\n  }\n\n  var length = new BN(hex, 16).toNumber() * 2;\n  return length ? utils.hexToUtf8('0x' + param.dynamicPart().substr(64, length).replace(/^0x/i, '')) : '';\n};\n/**\r\n * Should be used to format output address\r\n *\r\n * @method formatOutputAddress\r\n * @param {SolidityParam} param right-aligned input bytes\r\n * @param {String} name type name\r\n * @returns {String} address\r\n */\n\n\nvar formatOutputAddress = function formatOutputAddress(param, name) {\n  var value = param.staticPart();\n\n  if (!value) {\n    throw new Error('Couldn\\'t decode ' + name + ' from ABI: 0x' + param.rawValue);\n  }\n\n  return utils.toChecksumAddress(\"0x\" + value.slice(value.length - 40, value.length));\n};\n\nmodule.exports = {\n  formatInputInt: formatInputInt,\n  formatInputBytes: formatInputBytes,\n  formatInputDynamicBytes: formatInputDynamicBytes,\n  formatInputString: formatInputString,\n  formatInputBool: formatInputBool,\n  formatOutputInt: formatOutputInt,\n  formatOutputUInt: formatOutputUInt,\n  formatOutputBool: formatOutputBool,\n  formatOutputBytes: formatOutputBytes,\n  formatOutputDynamicBytes: formatOutputDynamicBytes,\n  formatOutputString: formatOutputString,\n  formatOutputAddress: formatOutputAddress,\n  toTwosComplement: utils.toTwosComplement\n};","map":null,"metadata":{},"sourceType":"script"}