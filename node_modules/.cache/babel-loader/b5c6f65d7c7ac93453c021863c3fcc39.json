{"ast":null,"code":"\"use strict\"; // global key for user preferred registration\n\nvar REGISTRATION_KEY = '@@any-promise/REGISTRATION',\n    // Prior registration (preferred or detected)\nregistered = null;\n/**\r\n * Registers the given implementation.  An implementation must\r\n * be registered prior to any call to `require(\"any-promise\")`,\r\n * typically on application load.\r\n *\r\n * If called with no arguments, will return registration in\r\n * following priority:\r\n *\r\n * For Node.js:\r\n *\r\n * 1. Previous registration\r\n * 2. global.Promise if node.js version >= 0.12\r\n * 3. Auto detected promise based on first sucessful require of\r\n *    known promise libraries. Note this is a last resort, as the\r\n *    loaded library is non-deterministic. node.js >= 0.12 will\r\n *    always use global.Promise over this priority list.\r\n * 4. Throws error.\r\n *\r\n * For Browser:\r\n *\r\n * 1. Previous registration\r\n * 2. window.Promise\r\n * 3. Throws error.\r\n *\r\n * Options:\r\n *\r\n * Promise: Desired Promise constructor\r\n * global: Boolean - Should the registration be cached in a global variable to\r\n * allow cross dependency/bundle registration?  (default true)\r\n */\n\nmodule.exports = function (root, loadImplementation) {\n  return function register(implementation, opts) {\n    implementation = implementation || null;\n    opts = opts || {}; // global registration unless explicitly  {global: false} in options (default true)\n\n    var registerGlobal = opts.global !== false; // load any previous global registration\n\n    if (registered === null && registerGlobal) {\n      registered = root[REGISTRATION_KEY] || null;\n    }\n\n    if (registered !== null && implementation !== null && registered.implementation !== implementation) {\n      // Throw error if attempting to redefine implementation\n      throw new Error('any-promise already defined as \"' + registered.implementation + '\".  You can only register an implementation before the first ' + ' call to require(\"any-promise\") and an implementation cannot be changed');\n    }\n\n    if (registered === null) {\n      // use provided implementation\n      if (implementation !== null && typeof opts.Promise !== 'undefined') {\n        registered = {\n          Promise: opts.Promise,\n          implementation: implementation\n        };\n      } else {\n        // require implementation if implementation is specified but not provided\n        registered = loadImplementation(implementation);\n      }\n\n      if (registerGlobal) {\n        // register preference globally in case multiple installations\n        root[REGISTRATION_KEY] = registered;\n      }\n    }\n\n    return registered;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}